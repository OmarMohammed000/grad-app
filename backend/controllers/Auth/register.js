import db from "../../models/index.js";
import bcrypt from "bcryptjs";

/**
 * Register a new user
 * Creates user account and initializes UserProfile and Character
 */
export default async function register(req, res) {
  if (!req.body || Object.keys(req.body).length === 0) {
    return res.status(400).json({ message: "Request body is missing" });
  }

  const { email, password, displayName } = req.body;

  if (!email || !password) {
    return res.status(400).json({ message: "Email and password are required" });
  }

  // Email validation
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return res.status(400).json({ message: "Invalid email format" });
  }

  // Password validation (minimum 6 characters)
  if (password.length < 6) {
    return res.status(400).json({ message: "Password must be at least 6 characters long" });
  }

  const transaction = await db.sequelize.transaction();

  try {
    // Check if user already exists
    const existingUser = await db.User.findOne({
      where: { email },
      transaction
    });

    if (existingUser) {
      await transaction.rollback();
      return res.status(409).json({ message: "User already exists" });
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(
      password,
      process.env.BCRYPT_SALT_ROUNDS ? parseInt(process.env.BCRYPT_SALT_ROUNDS) : 10
    );

    // Create user (ID is auto-generated by Sequelize)
    const newUser = await db.User.create({
      email,
      password: hashedPassword,
      isActive: true
    }, { transaction });

    // Create user profile
    await db.UserProfile.create({
      userId: newUser.id,
      displayName: displayName || 'Hunter',
      timezone: 'UTC',
      language: 'en',
      theme: 'auto',
      notificationsEnabled: true,
      emailNotifications: true,
      soundEnabled: true,
      isPublicProfile: true
    }, { transaction });

    // Create character (starts at E-Rank, Level 1)
    await db.Character.create({
      userId: newUser.id,
      rankId: 1,
      level: 1,
      currentXp: 0,
      totalXp: 0,
      xpToNextLevel: 100,
      streakDays: 0,
      longestStreak: 0,
      totalTasksCompleted: 0,
      totalHabitsCompleted: 0,
      totalChallengesJoined: 0,
      totalChallengesCompleted: 0
    }, { transaction });

    // Log activity
    await db.ActivityLog.create({
      userId: newUser.id,
      activityType: 'user_registered',
      description: 'Welcome to the Hunter System!',
      xpGained: 0,
      isPublic: true,
      importance: 'milestone'
    }, { transaction });

    await transaction.commit();

    return res.status(201).json({
      message: "User registered successfully",
      userId: newUser.id
    });

  } catch (error) {
    await transaction.rollback();
    console.error("Error registering user:", error);
    return res.status(500).json({ 
      message: "An error occurred while registering the user",
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
}
